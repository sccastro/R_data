getwd()
setwd("C:/Users/u1010240/Desktop/Studies/MitchHonors")
setwd("C:/Users/u1010240/Desktop/Studies/R_data/MitchHonors")
list.dirs
list.dirs()
install.packages("devtools")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("modelr")
install.packages("rmarkdown")
getwd()
setwd("C:/Users/u1010240/Desktop/Studies/R_data/MitchHonors")
files <- list.files(path="data", pattern="*.csv", full.names=T, recursive=FALSE)
files
class(files)
names(files)
length(files)
subids <- grep("[:digit:]")
subids <- grep("[:digit:]", files)
subids
subids <- regmatches(files, regexpr("[0-9].*[0-9]", files))
subids
subids <- regmatches(files, regexpr("[:digit:]", files))
subids
subids <- regmatches(files, regexpr("\\d*", files))
subids
subids <- regmatches(files, regexpr("\\d", files))
subids
subids <- regmatches(files, regexpr("\\d[a-z]?", files))
subids
condition <- regmatches(subids, regexpr("[a-z]?", subids))
condition
condition <- regmatches(subids, regexpr(".", subids))
condition
subids
condition <- regmatches(subids, regexpr("[:alpha:]", subids))
subids
condition
condition <- regmatches(subids, regexpr("[gmpw]?", subids))
condition <- regmatches(subids, regexpr("[gmpw]", subids))
condition <- regmatches(subids, regexpr("[g?m?p?w?]", subids))
condition
subids <- regmatches(files, regexpr("\\d[a-z]?", files))
condition <- regmatches(subids, regexpr("[g?m?p?w?]", subids))
subids
length(subids)
index <- which(files == x)
getwd()
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
index <- which(files == input)
# apply function
out <- function(t) {
#add columns with subid and condition
t %>%
mutate(subid <- regmatches(files, regexpr("\\d", files)))
}
# write to file
write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
index <- which(files == input)
# apply function
out <- t %>%
mutate(subid <- regmatches(files, regexpr("\\d", files)))
# write to file
write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
library(dplyr)
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
index <- which(files == input)
# apply function
out <- t %>%
mutate(subid <- regmatches(files, regexpr("\\d", files)))
# write to file
write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
index <- which(files == input)
# apply function
# out <- t %>%
#     mutate(subid <- regmatches(files, regexpr("\\d", files)))
# write to file
write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
index <- which(files == input)
# apply function
# out <- t %>%
#     mutate(subid <- regmatches(files, regexpr("\\d", files)))
print index
# write to file
#write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
index <- which(files == input)
# apply function
# out <- t %>%
#     mutate(subid <- regmatches(files, regexpr("\\d", files)))
print(index)
# write to file
#write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
#index <- which(files == input)
# apply function
# out <- t %>%
#     mutate(subid <- regmatches(files, regexpr("\\d", files)))
print(t)
# write to file
#write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
#index <- which(files == input)
# apply function
t %>%
mutate(subid <- regmatches(files, regexpr("\\d", files)))
# write to file
#write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
#index <- which(files == input)
# apply function
t %>%
mutate(subid <- regmatches(files[i], regexpr("\\d", files[i])))
# write to file
#write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input,i) {
t <- read.table(input, header=T) # load file
#Store the index
#index <- which(files == input)
# apply function
t %>%
mutate(subid <- regmatches(files[i], regexpr("\\d", files[i])))
# write to file
#write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
lapply(files, function(input) {
t <- read.table(input, header=T) # load file
#Store the index
#index <- which(files == input)
# apply function
t %>%
mutate(subid <- files[1])
print(t)
# write to file
#write.table(out, "data/clean", sep="\t", quote=F, row.names=F, col.names=T)
})
do.call("rbind", lapply(files, read.csv, head = TRUE))
subids <- regmatches(files, regexpr("\\d[a-z]?", files))
subids
fiiles
files
class(files)
for(i in files) {
i
}
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
for(i in files) {
i
}
for(i in files) {
print(i)
}
getwd()
setwd("C:/Users/u1010240/Desktop/Studies/R_data/MitchHonors/data")
setwd("C:/Users/u1010240/Desktop/Studies/R_data/MitchHonors")
for(i in files) {
read.csv(i)
}
data <-
read.csv(files[1])
data <-
input <- read.csv(files[1])
input
data <- read.csv(files[1])
for(i in files) {
something <- read.csv(i)
rbind(data, something)
}
for(i in files) {
something <- read.csv(i)
write.csv(something, file = "cleancombine",append = TRUE)
}
warnings()
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
setwd("C:/Users/u1010240/Desktop/Studies/R_data/MitchHonors")
combined <- multmerge("data")
combined <- multmerge("data")
combined
(mfrow = c(1,1))
(mfrow = c(1,1))
rm(list=ls()); par(mfrow = c(1,1))
getwd()
library(dplyr)
setwd("C:/Users/u1010240/Desktop/Studies/R_data/MitchHonors")
files <- list.files(path="data", pattern="*.csv", full.names=T, recursive=FALSE)
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
combined <- multmerge("data")
actLabels <- read.table('./UCIdata/UCI HAR Dataset/activity_labels.txt')
combined
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
datalist = lapply(files, function(x){read.csv(file=x,header=T)})
datalist
class(datalist)
datalist$sub
datalist[1]
length(datalist[1])
combined <- lapply(datalist, function(x,y) {
merge(x,y)
})
combined <- lapply(datalist, function(x) {
merge(x,y)
})
combined <- Reduce(function(x,y) {
merge(x,y)
}, datalist)
combined
datalist[1:2]
summary(datalist[1:2])
names(datalist[1:2])
colnames(datalist[1:2])
combined <- do.call(function(x) {
rbind(datalist)
})
combined <- do.call(rbind(datalist))
combined <- do.call(rbind, datalist)
summary(combined)
dim(combined)
combined$sub
summary(combined)
levels(combined$sub)
View(combined)
rm(list=ls()); par(mfrow = c(1,1))
getwd()
library(dplyr)
#Other users of this script will have to set their own working directory
setwd("C:/Users/u1010240/Desktop/Studies/R_data/MitchHonors")
# Get all files and apply functions to them -------------------------------
#Get filenames
files <- list.files(path="data", pattern="*.csv", full.names=T, recursive=FALSE)
#Get Subject IDs and conditions
subids <- regmatches(files, regexpr("\\d[a-z]?", files))
condition <- regmatches(subids, regexpr("[gmpw]", subids))
#List of files with all data
datalist = lapply(files, function(x){read.csv(file=x,header=T)})
#merge all of the files together
combined <- do.call(rbind, datalist)
summary(combined)
condition
combined %>%
group_by(sub) %>%
summarise(avg = mean(corr))
combined %>%
group_by(sub) %>%
plot(summarise(avg = mean(corr)))
colnames(combined, subid = sub)
colnames(combined)
colnames(combined[1])
colnames(combined[1]) <- "subid"
names(combined)
colnames(combined[1])
rename(combined, subid = sub)
summary(combined)
combined <- rename(combined, subid = sub)
summary(combined)
combined %>%
group_by(subid) %>%
mutate(.data, condition = regmatches(subid, regexpr("[gmpw]", subid)))
combined %>%
mutate(.data, condition = regmatches(subid, regexpr("[gmpw]", subid)))
clean <- mutate(combined, condition = regmatches(subid, regexpr("[gmpw]", subid)))
combined$condition <- ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", combined$subid, ignore.case = T), "white",
ifelse(grepl("g", combined$subid, ignore.case = T), "green","mixed"))
)
combined$condition <- ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", combined$subid, ignore.case = T), "white",
ifelse(grepl("g", combined$subid, ignore.case = T), "green","mixed"))
combined$condition <- ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
combined$condition <- ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", combined$subid, ignore.case = T), "white",
ifelse(grepl("g", combined$subid, ignore.case = T), "green","mixed")))
summary(combined)
combined$condition <- factor(ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", combined$subid, ignore.case = T), "white",
ifelse(grepl("g", combined$subid, ignore.case = T), "green","mixed"))))
summary(combined)
clean <- combined %>%
select(subid,condition,corr,rt1,rt2)
summary(clean)
clean$subid <- gsub('[0-9]+', '', clean$subid)
summary(clean)
clean$subid <- factor(gsub('[0-9]+', '', clean$subid))
summary(clean)
clean <- combined %>%
select(subid,condition,corr,rt1,rt2)
clean$subid <- factor(gsub('[a-z]+', '', clean$subid))
summary(clean)
combined$condition <- factor(ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", combined$subid, ignore.case = T), "white",
ifelse(grepl("g", combined$subid, ignore.case = T), "green","mixed"))))
clean <- combined %>%
select(subid,condition,targcol,corr,rt1,rt2)
clean$subid <- factor(gsub('[a-z]+', '', clean$subid))
summary(clean)
clean <- combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(desc(subid,condition))
clean$subid <- factor(gsub('[a-z]+', '', clean$subid))
head(clean)
clean <- combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(asc(subid,condition))
clean <- combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(!desc(subid,condition))
combined$condition <- factor(ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", combined$subid, ignore.case = T), "white",
files <- list.files(path="data", pattern="*.csv", full.names=T, recursive=FALSE)
#Get Subject IDs and conditions
subids <- regmatches(files, regexpr("\\d[a-z]?", files))
condition <- regmatches(subids, regexpr("[gmpw]", subids))
#List of files with all data
datalist = lapply(files, function(x){read.csv(file=x,header=T)})
#merge all of the files together
combined <- do.call(rbind, datalist)
#rename the sub column subid (matches a function sub())
combined <- rename(combined, subid = sub)
datalist = lapply(files, function(x){read.csv(file=x,header=T)})
combined <- do.call(rbind, datalist)
combined <- rename(combined, subid = sub)
combined$condition <- factor(ifelse(grepl("p", combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", combined$subid, ignore.case = T), "white",
ifelse(grepl("g", combined$subid, ignore.case = T), "green","mixed"))))
summary(combined)
clean <- combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(!desc(subid))
head(clean)
clean$subid <- factor(gsub('[a-z]+', '', clean$subid))
head(clean)
acc <- clean %>%
group_by(condition) %>%
summarise(perc_corr = mean(corr)*100)
head(acc)
head(acc)
View(clean)
summary(clean)
head(acc.mean)
acc.mean <- clean %>%
group_by(condition) %>%
summarise(perc_corr = mean(corr)*100)
head(acc.mean)
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr)) +
geom_line() + geom_point(size=5) + theme_minimal() +  my.axis.font +
xlab("Condition")
library(ggplot2)
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr)) +
geom_line() + geom_point(size=5) + theme_minimal() +  my.axis.font +
xlab("Condition")
my.axis.font<-theme(axis.title.x = element_text(size=18), axis.title.y = element_text(size=18),
axis.text.x = element_text(size=18), axis.text.y = element_text(size=18),
plot.title=element_text(size=18,face="bold"),
legend.title=element_text(size=14),legend.text=element_text(size=14))
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr)) +
geom_line() + geom_point(size=5) + theme_minimal() +  my.axis.font +
xlab("Condition")
accplot
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr)) +
geom_point(size=5) + theme_minimal() +  my.axis.font +
xlab("Condition")
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr, colour = perc_corr) +
geom_point(size=5) + theme_minimal() +  my.axis.font +
xlab("Condition")
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr, colour = perc_corr)) +
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr, colour = perc_corr)) +
geom_point(size=5) + theme_minimal() +  my.axis.font +
xlab("Condition")
accplot
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr, colour = perc_corr)) +
geom_point(size=5) + ylim(85,100) theme_minimal() +  my.axis.font +
xlab("Condition")
accplot
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr, colour = perc_corr)) +
geom_point(size=5) + ylim(85,100) theme_minimal() +  my.axis.font +
xlab("Condition")
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr, colour = perc_corr)) +
geom_point(size=5) + ylim(85,100) + theme_minimal() +  my.axis.font +
xlab("Condition")
accplot
accplot <- ggplot(acc.mean, aes(x = as.factor(condition), y=perc_corr, colour = perc_corr)) +
geom_point(size=5) + ylim(90,100) + theme_minimal() +  my.axis.font +
xlab("Condition")
accplot
names(clean)
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt, colour = targcol, group=targcol)) +
geom_line() + ylim(800,1100) + geom_point(size=5) + theme_minimal() +
my.axis.font + xlab("Condition") + guides(colour=FALSE) +
scale_x_discrete(breaks = 1:2, labels = c("Green","White"))
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt, colour = targcol, group=targcol)) +
ylim(800,1100) + geom_point(size=5) + theme_minimal() + my.axis.font + xlab("Condition")
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1, colour = targcol, group=targcol)) +
ylim(800,1100) + geom_point(size=5) + theme_minimal() + my.axis.font + xlab("Condition")
# + guides(colour=FALSE) +
# scale_x_discrete(breaks = 1:2, labels = c("Green","White"))
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1, colour = targcol, group=targcol)) +
ylim(800,1100) + geom_violin() + theme_minimal() + my.axis.font + xlab("Condition")
# + guides(colour=FALSE) +
# scale_x_discrete(breaks = 1:2, labels = c("Green","White"))
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1)) +
ylim(800,1100) + geom_violin() + theme_minimal() + my.axis.font + xlab("Condition")
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1)) +
ylim(0,1100) + geom_violin() + theme_minimal() + my.axis.font + xlab("Condition")
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1))
+ geom_violin() + theme_minimal() + my.axis.font + xlab("Condition")
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1))
+ geom_violin() + theme_minimal() + my.axis.font + xlab("Condition")
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1)) +
geom_violin() + theme_minimal() + my.axis.font + xlab("Condition")
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1, colour = condition)) +
geom_violin() + theme_minimal() + my.axis.font + xlab("Condition")
# + guides(colour=FALSE) +
# scale_x_discrete(breaks = 1:2, labels = c("Green","White"))
#can add target color --(colour = targcol, group=targcol)
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1, colour = condition)) +
geom_boxplot() + theme_minimal() + my.axis.font + xlab("Condition")
# + guides(colour=FALSE) +
# scale_x_discrete(breaks = 1:2, labels = c("Green","White"))
#can add target color --(colour = targcol, group=targcol)
rtplot
rtplot <- ggplot(clean, aes(x = as.factor(condition), y=rt1, colour = condition)) +
geom_boxplot() + ylim(0,1300) + theme_minimal() + my.axis.font + xlab("Condition")
rtplot
accplot
