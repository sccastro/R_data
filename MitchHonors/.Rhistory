theme_minimal() + my.axis.font + xlab("Condition") +
colScale + theme(legend.position="none")
rtplot1
rtplot2 <- ggplot(clean, aes(x = as.factor(condition), y=rt2, colour = condition)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) + ylim(0,3000) +
stat_boxplot(geom ='errorbar', width = 0.1)+
geom_boxplot(width = 0.2)+
theme_minimal() + my.axis.font + xlab("Condition") +
theme(legend.position="none") + colScale
rtplot2
rtplot1 <- ggplot(clean, aes(x = as.factor(condition), y=rt1, colour = condition)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), size = 1) + ylim(0,6000) +
stat_boxplot(geom ='errorbar', width = 0.1)+
geom_boxplot(width = 0.2)+
theme_minimal() + my.axis.font + xlab("Condition") +
colScale + theme(legend.position="none")
rtplot1
rthist2 <- ggplot(data=clean, aes(x=rt2, colour = as.factor(condition))) +
stat_density(position="identity", geom="line", aes(colour = as.factor(condition))) +
colScale +
ggtitle("Reaction Time \n by Condition \n in Selecting Target") + theme_minimal()
rthist2
rthist1 <- ggplot(data=clean, aes(x=rt1, colour = as.factor(condition))) +
stat_density(position="identity", geom="line", aes(colour = as.factor(condition))) +
ggtitle("Reaction Time \n by Condition \n in Selecting Target") + theme_minimal() +
colScale
rthist1
drt.combined$response <- recode_factor(drt.combined$response,
wrong ="-1", correct ="1", miss = "0",
.default = "NA")
which(is.na(drt.combined), arr.ind = TRUE)
drt.combined$response <- droplevels(drt.combined$response, exclude = "")
levels(drt.combined$response)
head(combined$response)
head(drt.combined$response)
rm(list=ls()); par(mfrow = c(1,1))
source("~/Documents/R_data/Nature_DRT/Load_Data.R")
require(tidyr)
#Other users of this script will have to set their own working directory
setwd("~/Documents/R_data/MitchHonors")
# 1. Get all files and apply functions to them -------------------------------
## 1.a Visual Data, or Vdata
Vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
Vfiles <- list.files(path=Vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
Vdatalist = lapply(Vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
Vcombined <- do.call(rbind, Vdatalist) #merge all of the files together
Vcombined <- dplyr::rename(Vcombined, subid = sub) #rename the sub column subid (matches a function sub())
## 1.b Get all DRT files and apply functions to them
if(!exists("drt.combined")) {
drt.combined <- ExtractDRT('DRTdata') #Only run this once or it will append to drt.data
}
Vcombined$condition <- factor(ifelse(grepl("p", Vcombined$subid, ignore.case = T), "practice",
ifelse(grepl("w", Vcombined$subid, ignore.case = T), "white",
ifelse(grepl("g", Vcombined$subid, ignore.case = T), "green","mixed"))))
Vcombined$subid <- factor(gsub('[a-z]+', '', Vcombined$subid), levels = 1:38)
Vcombined$condition <- factor(Vcombined$condition, levels = c("practice","white","green","mixed"))
#Select the columns we want, clean out NA's
clean <- Vcombined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 300 & rt1 < 6000, rt2 > 150 & rt2 < 3000)
cleanac <- Vcombined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid)
head(cleanac)
tempdat <- dat #make temporary file
setwd("~/Documents/R_data/MitchHonors")
# 1. Get all files and apply functions to them -------------------------------
## 1.a Visual Data, or Vdata
Vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
Vfiles <- list.files(path=Vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
Vdatalist = lapply(Vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
Vcombined <- do.call(rbind, Vdatalist) #merge all of the files together
vis.combined <- dplyr::rename(Vcombined, subid = sub) #rename the sub column subid (matches a function sub())
dfs <- c(drt.combined, vis.combined)
save(dfs)
save(dfs, file = "alldata")
getwd()
save(dfs, file = "alldata.R")
rm(list=ls())
load(file = "alldata.R")
dfs
save(c(drt.combined, vis.combined), file = "alldata.R")
rm(list=ls()); par(mfrow = c(1,1))
source("~/Documents/R_data/Nature_DRT/Load_Data.R")
require(tidyr)
#Other users of this script will have to set their own working directory
setwd("~/Documents/R_data/MitchHonors")
# 1. Get all files and apply functions to them -------------------------------
## 1.a Visual Data, or Vdata
Vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
Vfiles <- list.files(path=Vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
Vdatalist = lapply(Vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
Vcombined <- do.call(rbind, Vdatalist) #merge all of the files together
vis.combined <- dplyr::rename(Vcombined, subid = sub) #rename the sub column subid (matches a function sub())
## 1.b Get all DRT files and apply functions to them
if(!exists("drt.combined")) {
drt.combined <- ExtractDRT('DRTdata') #Only run this once or it will append to drt.data
}
vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
vfiles <- list.files(path=Vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
vdatalist = lapply(Vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
vis.combined <- do.call(rbind, Vdatalist) #merge all of the files together
vis.combined <- dplyr::rename(Vcombined, subid = sub) #rename the sub column subid (matches a function sub())
save(drt.combined, vis.combined, file = "alldata.Rdata")
rm(list=ls())
load(file = "alldata.R")
load(file = "alldata.Rdata")
vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
vfiles <- list.files(path=Vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
vdatalist = lapply(Vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
vis.combined <- do.call(rbind, Vdatalist) #merge all of the files together
vis.combined <- dplyr::rename(vis.combined, subid = sub) #rename the sub column subid (matches a function sub())
getwd()
vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
vfiles <- list.files(path=vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
vdatalist = lapply(vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
vis.combined <- do.call(rbind, Vdatalist) #merge all of the files together
vis.combined <- dplyr::rename(vis.combined, subid = sub) #rename the sub column subid (matches a function sub())
vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
vfiles <- list.files(path=vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
vdatalist = lapply(vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
vis.combined <- do.call(rbind, vdatalist) #merge all of the files together
vis.combined <- dplyr::rename(vis.combined, subid = sub) #rename the sub column subid (matches a function sub())
rm(list=ls())
load(file = "alldata.Rdata")
vis.combined$condition <- factor(ifelse(grepl("p", vis.combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", vis.combined$subid, ignore.case = T), "white",
ifelse(grepl("g", vis.combined$subid, ignore.case = T), "green","mixed"))))
vis.combined$subid <- factor(gsub('[a-z]+', '', vis.combined$subid), levels = 1:38)
vis.combined$condition <- factor(vis.combined$condition, levels = c("practice","white","green","mixed"))
#Select the columns we want, clean out NA's
clean <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 300 & rt1 < 6000, rt2 > 150 & rt2 < 3000)
cleanac <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid)
drt.combined$response <- recode_factor(drt.combined$response,
wrong ="-1", correct ="1", miss = "0",
.default = "NA")
which(is.na(drt.combined), arr.ind = TRUE)
levels(drt.combined$response)
drt.combined$response <-as.numeric(as.character(drt.combined$response))
drt.combined <- drt.combined[complete.cases(drt.combined),]
names(drt.combined)
drt.clean <- drt.combined %>%
select(subid,condition,rt,s1,R,response) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 150 & rt1 < 3000)
drt.combined
myColors <- c("red","grey","green","purple")
names(myColors) <- levels(clean$condition)
colScale <- scale_colour_manual(name = "conditions",values = myColors)
#Percentage correct by group
acc.mean <- cleanac %>%
group_by(condition) %>%
summarise(perc_corr = mean(corr)*100)
datac <- summarySEwithin(cleanac, measurevar ="corr", withinvars = c("condition"), idvar = "subid")
source("~/Documents/R_data/Nature_DRT/Load_Data.R")
myColors <- c("red","grey","green","purple")
names(myColors) <- levels(clean$condition)
colScale <- scale_colour_manual(name = "conditions",values = myColors)
#Percentage correct by group
acc.mean <- cleanac %>%
group_by(condition) %>%
summarise(perc_corr = mean(corr)*100)
datac <- summarySEwithin(cleanac, measurevar ="corr", withinvars = c("condition"), idvar = "subid")
datac <- summarySEwithin(cleanac, measurevar ="corr", withinvars = c("condition"), idvar = "subid")
clean <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 300 & rt1 < 6000, rt2 > 150 & rt2 < 3000)
cleanac <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid)
load(file = "alldata.Rdata")
clean <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 300 & rt1 < 6000, rt2 > 150 & rt2 < 3000)
cleanac <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid)
vis.combined
vdirs <- list.dirs(path = "data", full.names = TRUE) #get directories
vfiles <- list.files(path=vdirs, pattern="*.csv", full.names=T, recursive=FALSE) #Get filenames
vdatalist = lapply(vfiles, function(x){read.csv(file=x,header=T)}) #List of files with all data
vis.combined <- do.call(rbind, vdatalist) #merge all of the files together
vis.combined <- dplyr::rename(vis.combined, subid = sub) #rename the sub column subid (matches a function sub())
vis.combined$condition <- factor(ifelse(grepl("p", vis.combined$subid, ignore.case = T), "practice",
ifelse(grepl("w", vis.combined$subid, ignore.case = T), "white",
ifelse(grepl("g", vis.combined$subid, ignore.case = T), "green","mixed"))))
vis.combined$subid <- factor(gsub('[a-z]+', '', vis.combined$subid), levels = 1:38)
vis.combined$condition <- factor(vis.combined$condition, levels = c("practice","white","green","mixed"))
clean <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 300 & rt1 < 6000, rt2 > 150 & rt2 < 3000)
cleanac <- vis.combined %>%
select(subid,condition,targcol,corr,rt1,rt2) %>%
na.omit() %>%
arrange(subid)
myColors <- c("red","grey","green","purple")
names(myColors) <- levels(clean$condition)
colScale <- scale_colour_manual(name = "conditions",values = myColors)
#Percentage correct by group
acc.mean <- cleanac %>%
group_by(condition) %>%
summarise(perc_corr = mean(corr)*100)
datac <- summarySEwithin(cleanac, measurevar ="corr", withinvars = c("condition"), idvar = "subid")
rthist1 <- ggplot(data=clean, aes(x=rt1, colour = as.factor(condition))) +
stat_density(position="identity", geom="line", aes(colour = as.factor(condition))) +
ggtitle("Reaction Time \n by Condition \n in Selecting Target") + theme_minimal() +
colScale
rthist1
drt.clean <- drt.combined %>%
select(subid,condition,rt,s1,R,response) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 150 & rt1 < 3000)
drt.clean <- drt.combined %>%
select(subid = subids,condition,rt,s1,R,response) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt1 > 150 & rt1 < 3000)
drt.clean <- drt.combined %>%
select(subid = subids,condition,rt,s1,R,response) %>%
na.omit() %>%
arrange(subid) %>%
filter(rt > 150 & rt < 3000)
rm(list=ls())
dat <- read.csv("DRT2data/output2raw.csv")
# "Steering"
dat <- dat[dat$mode !=0,]
# Single trial
dat <- dat[dat$stimulus !=0,]
# 24 rows (11 at the start of subject 20a and 13 at the start of subject 20b) with no entries.
dat <- dat[!(is.na(dat$r1) | is.na(dat$r2)),]
dat$response <- droplevels(dat$response)
dat$r1r2 <- paste(dat$r1,dat$r2,sep =".")
# table(dat$cond,dat$subid,dat$mode,dat$load)
# , ,  = 1,  = 0
#
#
#       1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
#   a 119 128  91  89 110 113 108 101 102  97  97 105 102 101 108 102  70 110 105 106
#   b 115  72  89 107 110  90 107 111 120 101 107  28  93 107 109  28 146 111  93 108
#
# , ,  = 2,  = 0
#
#
#       1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
#   a 111 114 106  99  94 107 108 110 103 107 106 105 109 106 125 105  67  92 106 108
#   b 135  92 112 106 108  92 105 106 118 106 106  14 106 106 106  14 149  84 109 105
#
# , ,  = 3,  = 0
#
#
#       1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
#   a 111  95 104 152 112 109 105 105 117 120 104 104 121 103 103 109  66 108 108 108
#   b 129  93 107 108 102 104 102  99 111  92 111  13  99 111 106  13 147 108  91 109
#
# , ,  = 1,  = 1
#
#
#       1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
#   a 107 138 113  77  81 109  99 107 106  92 103 105  87  99 105 105  67 107 103 107
#   b 130  64 109 109 111  95 110 106 124  95 104  29  96 104 108  29 149  93  93 107
#
# , ,  = 2,  = 1
#
#
#       1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
#   a 121 101 105 104 108 108  94  92  95 108 106 106 106 106 104 105  69 106 106 108
#   b 115  88 118  96 111 103 105 106 106 112 107  15 112 107 108  15 146 119  97 106
#
# , ,  = 3,  = 1
#
#
#       1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
#   a 108 101 104  81 117 105 108 125 107  94 108 108  93 109  96 107  70 111 108  93
#   b  78 102 104 113 112 108 105 110 113 109 109  14 109 109 111  14 149 109  91 107
# table(response=dat$response,r1r2=dat$r1r2,stimulus=dat$stimulus,mode=dat$mode)
# Removed the all zero subtables where mode=1, stimulus=2  and mode=2, stimulus=1.
# , , stimulus = 1, mode = 1
#
#          r1r2
# response   0.0  0.1  0.2  0.3  1.0  1.1  2.0  2.1
#   correct    0 7206    0    0    0    1    0    3
#   miss     537    0    0    0    0    0    0    0
#   wrong      0    0   84    3  160    0    4    0
#
# , , stimulus = 2, mode = 2
#
#          r1r2
# response   0.0  0.1  0.2  0.3  1.0  1.1  2.0  2.1
#   correct    0    0    0    0 7396    2    0    0
#   miss     563    0    0    0    0    0    0    0
#   wrong      0   60    1    0    0    0   95    0
#
# , , stimulus = 1, mode = 3
#
#          r1r2
# response   0.0  0.1  0.2  0.3  1.0  1.1  2.0  2.1
#   correct    0 2872    0    0    1    9    0    2
#   miss     118    0    0    0    0    0    0    0
#   wrong      0    1   18    0 1105    0    2    0
#
# , , stimulus = 2, mode = 3
#
#          r1r2
# response   0.0  0.1  0.2  0.3  1.0  1.1  2.0  2.1
#   correct    1    0    0    0 2789    7    0    0
#   miss     146    0    0    0    0    0    0    0
#   wrong      0 1053    5    0    0    0   19    0
#
# Remove cases where more than one button pressed
dat <- dat[!(dat$r1r2=="1.1" | dat$r1r2=="2.1"),]
# Remove case with no reponse but an RT
dat <- dat[!(dat$r1r2=="0.0" & dat$rt > 0),]
# table(response=dat$response,r1r2=dat$r1r2,stimulus=dat$stimulus,mode=dat$mode)
# , , stimulus = 1, mode = 1
#
#          r1r2
# response   0.1  0.2  0.3  1.0  2.0
#   correct 7206    0    0    0    0
#   miss       0    0    0    0    0
#   wrong      0   84    3  160    4
#
# , , stimulus = 2, mode = 2
#
#          r1r2
# response   0.1  0.2  0.3  1.0  2.0
#   correct    0    0    0 7396    0
#   miss       0    0    0    0    0
#   wrong     60    1    0    0   95
#
# , , stimulus = 1, mode = 3
#
#          r1r2
# response   0.1  0.2  0.3  1.0  2.0
#   correct 2872    0    0    1    0
#   miss       0    0    0    0    0
#   wrong      1   18    0 1105    2
#
# , , stimulus = 2, mode = 3
#
#          r1r2
# response   0.1  0.2  0.3  1.0  2.0
#   correct    0    0    0 2789    0
#   miss       0    0    0    0    0
#   wrong   1053    5    0    0   19
# Rescore multiple presses
# correct response for stimulus=1 is r2 = 1 = 1 or more and stimulus=2 is r1=1 or more
dat$C <- (dat$r1>0 & dat$stimulus==2) | (dat$r2>0 & dat$stimulus==1)
dat$C[dat$rt<0] <- NA
dat$responseC <- factor(dat$C,labels=c("wrong","correct"))
dat$responseC <- as.character(dat$responseC)
dat$responseC[is.na(dat$responseC)] <- "miss"
dat$responseC <- factor(dat$responseC)
# Absolute blocks across all subjects
dat$block <- cumsum(c(1,diff(abs(dat$load))!=0 |
diff(abs(dat$mode))!=0 |
diff(abs(dat$subid))!=0))
#####  SPENCER PLEASE REMOVE BLOCKS FROM HERE
require(dplyr)
#I could do all the filtering in one step, but I broke it into three for clarity, and to get the number of trials
#for each criterion.
# Small Blocks ------------------------------------------------------------
tempdat <- dat #make temporary file
tempdat$block <- factor(tempdat$block) #make sure block is a factor
tempdat$response <- recode_factor(tempdat$response,
wrong ="0", correct ="1", miss = "-1",
.default = "NA")  #make response numbers to compute average
tempdat$response <- as.numeric(as.character(tempdat$response)) #format numeric, (int doesn't do fractions)
bad_small <- tempdat %>% #load tempdat
filter(response != -1) %>% #get rid of misses
group_by(block) %>% #group by the block for averaging
summarise(acc = mean(response)*100, n=n()) %>% #Get the percent average correct and number of trials in each block
filter(n < 8) #Select only blocks that have under 8 trials
# hist(bad_small$n, breaks = 0:43) #histogram of small trials removed
small <- droplevels(bad_small$block)
#73 small blocks, 373 trials
sum(bad_small$n)
# [1] 373
# Accuracy Blocks ---------------------------------------------------------
'%ni%' <- Negate('%in%') #used to exclude the small trials in filter()
bad_acc <- tempdat %>% #load tempdat
filter(response != -1) %>% #get rid of misses
group_by(block) %>% #group by the block for averaging
summarise(acc = mean(response)*100, n=n()) %>% #Get the percent average correct and number of trials in each block
filter(acc < 50 & block %ni% bad_small) #Select all blocks under 50% accuracy, excluding the small trials
hist(bad_acc$n, breaks = 0:43)
acc <- droplevels(bad_acc$block)
#68 separate blocks with accuracy under 50%
# Miss Blocks -------------------------------------------------------------
missdata <- tempdat #temporary data file
missdata$response <- factor(missdata$response) #make response a factor again to recode
missdata$response <- recode_factor(missdata$response,
"-1" = "0", "1" ="1", "0" = "-1",
.default = "NA") #make misses 0 and wrong responses -1 for computing average
missdata$response <-as.numeric(as.character(missdata$response))  #format numeric, (int doesn't do fractions)
miss_blocks <- missdata %>% #load missdata
filter(response != -1) %>% #get rid of wrong responses
group_by(block) %>% #group by the block for averaging
summarise(missrate = 100 - (mean(response)*100), n=n()) %>% #Get the percent average missed and number of trials in each block
filter(missrate > 50 & block %ni% bad_small & block %ni% bad_acc) #Select all blocks with miss rate over 50%, excluding the small and bad_acc trials
hist(miss_blocks$n, breaks = 0:43)
miss <- droplevels(miss_blocks$block)
#8 blocks that have missed more than 50% of the lights excluding small and poor accuracy trials.
miss_blocks$n
#  [1] 20 33 13 26 13 13 28 19 13 13 12 25 19  8  6  7 15  2 22 14 15  2 13
# Remove all blocks in list -----------------------------------------------
all_bad <- unlist(list(bad_small$block,bad_acc$block,miss_blocks$block))
length(unique(all_bad))
# [1] 149
#149 total blocks in the list of bad blocks
badlist <- dat$block %in% all_bad
sum(badlist)
# [1] 1691
dim(dat)
# [1] 24238    13
dat <- dat[!badlist,]
dim(dat)
# [1] 22547    13
# % removed
100*1691/24238
# [1] 6.976648
table(responseC=dat$responseC,r1r2=dat$r1r2,stimulus=dat$stimulus,mode=dat$mode)
# , , stimulus = 1, mode = 1
#
#          r1r2
# responseC  0.0  0.1  0.2  0.3  1.0  2.0
#   correct    0 6991   83    3    0    0
#   miss     407    0    0    0    0    0
#   wrong      0    0    0    0   47    3
#
# , , stimulus = 2, mode = 2
#
#          r1r2
# responseC  0.0  0.1  0.2  0.3  1.0  2.0
#   correct    0    0    0    0 7248   95
#   miss     416    0    0    0    0    0
#   wrong      0   51    1    0    0    0
#
# , , stimulus = 1, mode = 3
#
#          r1r2
# responseC  0.0  0.1  0.2  0.3  1.0  2.0
#   correct    0 2726   15    0    0    0
#   miss      76    0    0    0    0    0
#   wrong      0    0    0    0  829    2
#
# , , stimulus = 2, mode = 3
#
#          r1r2
# responseC  0.0  0.1  0.2  0.3  1.0  2.0
#   correct    0    0    0    0 2580   19
#   miss      97    0    0    0    0    0
#   wrong      0  854    4    0    0    0
# Remove dud session b for subjects 12 and 16
bad <- (dat$subid=="12" & dat$cond=="b") | (dat$subid=="16" & dat$cond=="b")
dat <- dat[!bad,]
dat$rt[dat$rt==-1] <- NA
# Simple RT
head(sort(dat$rt[dat$mode!=3]),100)
#   [1]   4  32  43  57  63  70  72  78  78  96 110 112 116 141 145 145 148 148 152 152 154 154 157 157
#  [25] 160 162 162 163 163 164 164 164 165 166 166 167 167 168 168 169 170 170 171 171 171 173 174 174
#  [49] 174 175 175 176 176 176 178 178 179 179 180 181 181 182 182 183 184 184 184 184 184 184 184 185
#  [73] 185 185 186 187 187 187 187 187 188 188 189 189 190 190 190 190 190 190 190 190 190 191 191 192
#  [97] 192 193 193 193
# Choice RT
head(sort(dat$rt[dat$mode==3]),100)
#   [1]  11 100 227 246 266 294 294 309 311 312 313 315 315 327 330 332 342 345 347 349 350 352 353 356
#  [25] 366 366 367 368 373 373 373 373 376 377 382 385 388 390 393 394 394 394 394 394 397 398 400 400
#  [49] 401 405 405 405 410 411 412 413 414 416 416 416 417 419 420 421 422 425 425 425 426 429 430 432
#  [73] 433 433 434 434 434 435 436 437 438 438 438 439 439 441 443 444 445 445 447 448 448 449 452 453
#  [97] 455 455 455 456
# Simple RT
tail(sort(dat$rt[dat$mode!=3]),100)
#   [1] 2476 2487 2489 2498 2503 2503 2505 2509 2510 2521 2521 2546 2552 2553 2563 2574 2581 2585 2598
#  [20] 2605 2612 2613 2614 2619 2619 2623 2636 2639 2649 2651 2656 2660 2682 2683 2689 2691 2694 2712
#  [39] 2716 2733 2754 2764 2765 2771 2780 2781 2785 2789 2790 2792 2794 2811 2813 2850 2854 2861 2870
#  [58] 2901 2905 2918 2932 2936 2938 2945 2950 2952 2953 2988 3001 3010 3028 3076 3080 3086 3095 3099
#  [77] 3123 3160 3196 3201 3202 3218 3220 3232 3259 3319 3373 3410 3454 3490 3515 3682 3713 3781 3890
#  [96] 3890 3947 4044 4184 4266
# Choice RT
tail(sort(dat$rt[dat$mode==3]),100)
#   [1] 2313 2313 2313 2316 2316 2320 2322 2322 2323 2323 2327 2337 2337 2339 2350 2352 2352 2352 2361
#  [20] 2371 2373 2373 2378 2380 2385 2386 2392 2396 2399 2416 2447 2463 2463 2468 2482 2499 2501 2504
#  [39] 2507 2508 2519 2532 2532 2533 2558 2570 2573 2607 2607 2649 2659 2671 2695 2708 2717 2727 2742
#  [58] 2742 2747 2756 2794 2830 2836 2857 2859 2867 2902 2909 2909 2953 2955 2991 3009 3019 3026 3050
#  [77] 3075 3091 3095 3111 3122 3128 3149 3154 3155 3197 3237 3238 3259 3317 3325 3343 3394 3415 3542
#  [96] 3625 3884 3884 3973 4016
tapply(dat$rt,dat$mode,median,na.rm=TRUE)
#   1   2   3
# 517 541 885
tapply(dat$rt,dat$mode,IQR,na.rm=TRUE)
rm(list=ls())
dat <- read.csv("DRT2data/output2raw.csv")
