head(clean[1:20])
head(clean[1:20,])
head(clean[,1:20])
head(clean[1:20,1:4])
head(clean[1:20,1:8])
data.frame(head(clean[1:20,]))
head(data.frame(clean[1:20,]))
head(data.frame(clean[1:20,1:2]))
head(data.frame(clean[[1:20,]]))
head(data.frame(clean[[1:20]]))
head(data.frame(clean[1:20]))
head(data.frame(clean[1:20,]))
data.frame(clean[1:20,])
dprimepre
clean.mean
data.frame(clean.mean)
dprime(dprimepre)
names(clean)
names(clean$condition)
levels(clean$condition)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
dprime(dprimetest)
qpot(dprime(dprimetest))
qplot(dprime(dprimetest))
class(dprime(dprimetest))
data.frame(dprime(dprimetest))
qplot(data.frame(dprime(dprimepre)))
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
data.frame(dprime(dprimetest))
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq)
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq, na.omit())
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq, na.rm = TRUE)
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq, na.rm = TRUE)
ggplot(data.frame(dprime(dprimepre)), aes(x=subject, y = Freq)) + geom_line(na.rm = TRUE)
ggplot(data.frame(dprime(dprimepre)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE)
ggplot(data.frame(dprime(dprimepre)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprime(dprimepre)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
data.frame(dprime(dprimetest))
test <- ggplot(data.frame(dprime(dprimetest)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
test <- ggplot(data.frame(dprime(dprimetest)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
test
summary(dprimepre)
pre <- data.frame(dprime(dprimepre))
preplot <- ggplot(pre, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
pre <- data.frame(dprime(dprimepre))
preplot <- ggplot(pre, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
pre
summary(pre)
dplyr::summarise(pre, dprime = mean(Freq))
dplyr::summarise(pre, dprime = mean(Freq), rm.na = TRUE)
dplyr::summarise(pre, dprime = mean(Freq))
dplyr::summarise(pre, !is.na(dprime = mean(Freq)))
dplyr::summarise(pre, dprime = !is.na(mean(Freq)))
dplyr::summarise(pre)
pre <- data.frame(dprime(dprimepre))
dplyr::summarise(pre)
pre
mean(pre$Freq)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
test <- ggplot(data.frame(dprime(dprimetest)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
test <- data.frame(dprime(dprimetest))
testplot <- ggplot(test, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
clean$condition
dprimepost <- clean %>%
filter(condition == "Posttesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimepost$condition <- droplevels(dprimepost$condition)
post <- data.frame(dprime(dprimepost))
postplot <- ggplot(post, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
postplot
dprimes <- rbind(pre, rbind(test,post))
dprimes
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
post <- data.frame(dprime(dprimepost)) %>%
mutate(condition = "post")
post
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
test <- data.frame(dprime(dprimetest)) %>%
mutate(condition = "test")
pre <- data.frame(dprime(dprimepre)) %>%
mutate(condition = "pre")
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
levels(dprimes$condition)
dprimeplot <- ggplot(dprimes, aes(x=subject, y = Freq, color = as.factor(condition))) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimes$condition <- factor(dprimes$condition, levels = c("pre","test","post"))
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font()
dprimeplot + theme_minimal() + my.axis.font
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) +
geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font
dprimes
dprimes <- bind_rows(pre, bind_rows(test,post)) %>%
arrange(subject)
dprimes$condition <- factor(dprimes$condition, levels = c("pre","test","post"))
dprimes
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) +
geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font
accplot2 <- ggplot(datac, aes(x = condition, y=correct, fill = r1g0)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n") +
scale_fill_brewer(type = "qual", palette = 2,direction = 1)
accplot2
accplot3 <- ggplot(datac1, aes(x = condition, y=correct)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n")
accplot3
datac
clean.mean
dataframe(clean.mean)
data.frame(clean.mean)
clean %>%
group_by(condition, r1g0) %>%
filter(r1g0 == "g" | falsealarm == 1) %>%
dplyr::summarise(total.count = n())
acc.mean
datac
clean
clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
data.frame(aprime)
data.frame(aprime) %>%
filter(r1g0 = "g")
data.frame(aprime) %>%
filter(r1g0 == "g")
green <- aprime %>%
filter(r1g0 == "g") %>%
print(total.count)
green
green <- aprime %>%
filter(r1g0 == "g")
data.frame(green$total.count)
green$total.count
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
aprime
clean
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = pressCount, FA = falsealarm)
aprime
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = as.numeric(pressCount), FA = falsealarm)
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = as.numeric(pressCount), FA = falsealarm)
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = pressCount, FA = falsealarm)
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0)
aprime
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = n(pressCount), FA = n(falsealarm))
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
aprime
>>>>>>> origin/master
read.csv("~/Documents/R_data/FlankerModeling/PhaseTwoParticipantTrackingSheet")
getwd()
read.csv("~/Documents/R_data/FlankerModeling/PhaseTwoParticipantTrackingSheet")
read.csv("~/Documents/R_data/FlankerModeling/PhaseTwoParticipantTrackingSheet.csv")
demos <-read.csv("~/Documents/R_data/FlankerModeling/PhaseTwoParticipantTrackingSheet.csv")
head(demos)
rm(list = ls())
demos <-read.csv("~/Documents/R_data/FlankerModeling/PhaseTwoParticipantTrackingSheet.csv")
head(demos)
View(demos)
demosclean <- demos %>%
select(subid = X, gdata = Good.Data.,WMC = H.L.Span)
require(ggpolt2)
require(dplyr)
demosclean <- demos %>%
select(subid = X, gdata = Good.Data.,WMC = H.L.Span)
demosclean
source('~/Documents/R_data/FlankerModeling/Add_WM.R')
require(ggplot2)
df <- read.csv("~/Documents/R_data/FlankerModeling/FlankerLBA.csv")
str(df)
unique(df$s)
arrange(unique(df$s))
arrange(as.numeric(unique(df$s)))
demosclean <- demos %>%
select(subid = X, gdata = Good.Data.,WMC = H.L.Span) %>%
filter(gdata == "yes")
demosclean
df$s
View(df)
dfclean <- df %>%
factor(subid)
df
names(subid)
names(df)
dfclean <- df %>%
arrange(factor(s))
head(dfclean)
summary(dfclean)
head(dfclean)
dfclean <- df %>%
factor(s)
dfclean <- df %>%
factor(s)
dfclean <- df %>%
as.factor(s)
dfclean <- df %>%
arrange(s)
unique(dfclean$s)
dfclean <- df %>%
arrange(s) %>%
class(s)
View(demosclean)
gsubids <- demosclean$subid
gsubids
dfclean <- df %>%
arrange(s) %>%
filter(s == gsubids)
unique(dfclean$s)
gsubids
length(unique(dfclean$s))
length(gsubids)
head(dfclean)
length(unique(dfclean$s))
demosclean <- demos %>%
select(s = X, gdata = Good.Data.,WMC = H.L.Span) %>%
filter(gdata == "yes")
dfclean <- df %>%
arrange(s) %>%
filter(s == gsubids) %>%
semi_join(demosclean, by = "s")
length(unique(dfclean$s))
head(dfclean)
demosclean <- demos %>%
select(s = X, gdata = Good.Data.,WMC = H.L.Span) %>%
filter(gdata == "yes")
gsubids <- demosclean$subid
length(gsubids)
dfclean <- df %>%
arrange(s) %>%
filter(s == gsubids)
demosclean <- demos %>%
select(s = X, gdata = Good.Data.,WMC = H.L.Span) %>%
filter(gdata == "yes")
gsubids <- demosclean$s
length(gsubids)
dfclean <- df %>%
arrange(s) %>%
filter(s == gsubids)
semi_join(dfclean,demosclean, by = "s")
df.full <- semi_join(dfclean,demosclean, by = "s")
length(unique(dfclean$s))
str(df.full)
head(df.full)
head(df.full)
head(demoseclean)
head(demosclean)
demosclean
df.full <- merge(dfclean,demosclean, by = "s",all = TRUE)
head(df.full)
summary(df.full)
unclass(df.full)
class(df.full)
class(df.fullS)
class(df.full$s)
class(df.full$S)
df.full
sample(df.full, 10)
names(df.fc)
names(df.full)
df.fc <- df.full %>%
select(-gdata)
head(df.fc)
summary(df.full)
df.fc <- df.full %>%
select(-gdata, s=factor(s), S=factor(s))
df.fc <- df.full %>%
select(-gdata, s=as.factor(s), S=as.factor(s))
summary(df.full)
df.fc
head(df.fc)
summary(df.full)
l1 <- c("s","S","F", "R", "congruent","WMC")
l2 <- c("RT", "OverallAcc")
df.fc <- df.full %>%
select(-gdata)%>%
mutate_each_(funs(factor), l1) %>% mutate_each_(funs(as.numeric))
df.fc <- df.full %>%
select(-gdata)%>%
mutate_each_(funs(factor), l1) %>% mutate_each_(funs(as.numeric), l2)
summary(df.fc)
str(df.fc)
df.fc <- df.full %>%
select(-gdata)%>%
mutate_each_(funs(factor), l1) %>% mutate_each_(funs(as.numeric), l2) %>%
filter(S != "", F != Practice, R == "r2" | R == "r1")
df.fc <- df.full %>%
select(-gdata)%>%
mutate_each_(funs(factor), l1) %>% mutate_each_(funs(as.numeric), l2) %>%
filter(S != "", F != "Practice", R == "r2" | R == "r1")
df.fc
str(df.fc)
df.fc$R
df.fc$R <- factor(df.fc$R)
levels(df.fc$R)
levels(df.fc$S)
levels(df.fc$s)
levels(df.fc$F)
df.fc$S <- factor(df.fc$S)
levels(df.fc$F)
levels(df.fc$F)
df.fc$F <- factor(df.fc$F)
levels(df.fc$F)
levels(df.fc$R)
head(df.fc)
levels(df.fc$S)
write.csv(x=df.fc, file = "FlankerDataClean.csv")
getwd()
print(unique(subset(df.fc, WMC == L)))
print(unique(subset(df.fc, WMC == "L")))
print(unique(subset(df.fc, WMC == "L")[,1]))
print(unique(subset(df.fc, WMC != "L")[,1]))
length(dfclean$s)
length(df$s)
length(gsubids)
length(subset(df, s ==1)[,1])
length(df.full[,1])
length(df.clean[,1])
length(dfclean[,1])
length(subset(df.clean, s == 1)[,1])
length(subset(dfclean, s == 1)[,1])
dim(df)
dim(dfclean)
dim(demosclean)
demosclean
class(gsubids$s)
gsubids
class(gsubids)
dim(df.fc)
dim(df.full)
dfclean <- df %>%
arrange(s)
length(df.clean$s)
length(dfclean$s)
length(subset(df, s == 1)[,1])
length(subset(dfclean, s == 1)[,1])
dfclean <- df %>%
arrange(s) %>%
filter(s %in% gsubids)
length(subset(dfclean, s == 1)[,1])
df.full <- merge(dfclean,demosclean, by = "s",all = TRUE)
l1 <- c("s","S","F", "R", "congruent","WMC")
l2 <- c("RT", "OverallAcc")
df.fc <- df.full %>%
select(-gdata)%>%
mutate_each_(funs(factor), l1) %>% mutate_each_(funs(as.numeric), l2) %>%
filter(S != "", F != "Practice", R == "r2" | R == "r1")
df.fc$R <- factor(df.fc$R)
df.fc$F <- factor(df.fc$F)
df.fc$S <- factor(df.fc$S)
write.csv(x=df.fc, file = "FlankerDataClean.csv")
print(unique(subset(df.fc, WMC == "L")[,1]))
print(unique(subset(df.fc, WMC != "L")[,1]))
require(ggplot2)
rm(list = ls())
require(dplyr)
demos <-read.csv("~/Documents/R_data/FlankerModeling/PhaseTwoParticipantTrackingSheet.csv")
df <- read.csv("~/Documents/R_data/FlankerModeling/FlankerLBA.csv")
source('~/Documents/R_data/FlankerModeling/Add_WM.R')
length(gsubids)
print(unique(subset(df.fc, WMC == "L")[,1]))
print(unique(subset(df.fc, WMC != "L")[,1]))
knitr::opts_chunk$set(fig.path='Figs/', fig.align='center',
warning=FALSE, message=FALSE, results='hide')
source("Load_Data.R")
source("Load_Data.R")
combined.data <- CombineData()
clean.data <- CleanData(combined.data)
combined.data <- CombineData()
getwd()
rm(list = ls())
source("Load_Data.R")
combined.data <- CombineData()
Getaprime = function(data, hitrate, farate) {
require(dplyr)
aprimescore = ifelse(data$hitrate >= data$farate,
.5 + ((data$hitrate - data$farate)*(1 + data$hitrate - data$farate))/(4*data$hitrate *(1-data$farate)),
.5 - ((data$farate - data$hitrate)*(1+data$farate-data$hitrate))/(4*data$farate)*(1-data$hitrate))
data$aprimescore <- aprimescore
return(data)
}
knitr::opts_chunk$set(fig.align = 'center', warning = FALSE,
message = FALSE, results = 'hide')
aprime <- clean %>%
select(subid,condition,r1g0,correct,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(hitrate = mean(correct), farate = mean(falsealarm)) #Get summaries of hitrate and false alarm rate
source("Load_Data.R") #Get the functions for loading the data
clean.data <- CleanData(combined.data) #Save output of function for cleaning data
combined.data <- CombineData() #Save output of function for combining csv files
combined.data <- CombineData() #Save output of function for combining csv files
clean.data <- CleanData(combined.data) #Save output of function for cleaning data
clean <- clean.data %>%
filter(isPractice == "no") %>%
group_by(subid,condition,r1g0) %>%
dplyr::mutate(falsealarm = ifelse(pressCount == 1 & r1g0 == "r", 1,0)) %>%
dplyr::mutate(miss = ifelse(pressCount == 0 & r1g0 == "g", 1,0)) %>%
dplyr::mutate(totalerrors = miss + falsealarm) %>%
dplyr::mutate(correct = ifelse(totalerrors == 0, 1,0))
cleanrt <- clean %>%
filter(rt > 100 & rt < 2000)
aprime <- clean %>%
select(subid,condition,r1g0,correct,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(hitrate = mean(correct), farate = mean(falsealarm)) #Get summaries of hitrate and false alarm rate
hitrate1 <- aprime[c(TRUE,FALSE),]$hitrate #Get just the hits to green light
farate1 <- aprime[aprime$r1g0 == "r",]  #Get just the false alarms to red light (next line too)
farate2 <- farate1$farate
aprime1 <- aprime %>%
group_by(subid,condition) %>%
summarise(hitrate = mean(hitrate),farate = mean(farate)) #Prepare a dataframe for hitrate1 and farate1
aprime1$hitrate <- hitrate1 #update the hitrate column wit correct hitrates
aprime1$farate <- farate2 #update the false alarm column with correct false alarm rates
aprime1[1:10,]
aprime2 <- Getaprime(aprime1) #Run the function Getaprime to append A' scores to the dataframe
aprime2
Getaprime = function(data, hitrate, farate) {
require(dplyr)
aprimescore = ifelse(data$hitrate >= data$farate,
.5 + ((data$hitrate - data$farate)*(1 + data$hitrate - data$farate))/(4*data$hitrate *(1-data$farate)),
.5 - ((data$farate - data$hitrate)*(1+data$farate-data$hitrate))/(4*data$farate)*(1-data$hitrate))
data$aprimescore <- aprimescore
return(data)
}
aprime2 <- Getaprime(aprime1) #Run the function Getaprime to append A' scores to the dataframe
aprime2
Getaprime(data = aprime1, hitrate = hitrate1, farate = farate2)
hitrate1
aprimeclean <- aprime2 %>%
filter(aprimescore > .5) #Get rid of the bad participants
aprimeclean
datac <- summarySEwithin(clean, measurevar ="correct", withinvars = c("condition","r1g0"), idvar = "subid")
datac1 <- summarySEwithin(clean, measurevar ="correct", withinvars = c("condition"), idvar = "subid")
dataca <- summarySE(aprimeclean, measurevar = "aprimescore", groupvars = "condition", na.rm = TRUE)
datart <- summarySEwithin(cleanrt, measurevar ="rt", withinvars = c("condition","correct"), idvar = "subid")
datart
