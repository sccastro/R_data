<<<<<<< HEAD
rtplot1 <- ggplot(datart, aes(x = as.factor(condition),
fill = totalerrors,y=rt)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
xlab("Condition")
rtplot1
datart
str(clean)
glimpse(clean)
clean$totalerrors
source("https://raw.githubusercontent.com/talgalili/R-code-snippets/master/boxplot.with.outlier.label.r") # Load the function
set.seed(492)
y <- rnorm(2000)
y
plot(y)
hist(y)
x2 <- sample(letters[1:2], 2000,T)
x1 <- sample(letters[1:2], 2000,T)
hist(x1)
class(x1)
x1
x2
lab_y <- sample(letters[1:4], 2000,T)
lab_y
boxplot.with.outlier.label(y~x2*x1, lab_y)
install.packages("TeachingDemos")
require(TeachingDemos)
set.seed(492)
y <- rnorm(2000)
x1 <- sample(letters[1:2], 2000,T)
x2 <- sample(letters[1:2], 2000,T)
lab_y <- sample(letters[1:4], 2000,T)
# plot a boxplot with interactions:
boxplot.with.outlier.label(y~x2*x1, lab_y)
head(clean)
head(clean)
clean.mean
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_error = mean(totalerrors)*100)
clean.mean
boxplot.with.outlier.label(perc_error~condition*subid, as.data.frame(clean.mean))
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_error = mean(totalerrors)*100)
boxplot.with.outlier.label(perc_error~condition*subid, as.data.frame(clean.mean))
clean.mean
boxplot.with.outlier.label(perc_error~condition*subid, as.data.frame(clean.mean))
boxplot.with.outlier.label(clean.mean$perc_error~clean.mean$condition*clean.mean$subid)
boxplot(perc_error, subid, data = clean.mean)
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_error = mean(totalerrors)*100)
boxplot(perc_error, subid, data = clean.mean)
boxplot(data = clean.mean, perc_error, subid)
boxplot(clean.mean$perc_error, clean.mean$subid)
clean.mean
boxplot.with.outlier.label(clean.mean$perc_error~clean.mean$condition*clean.mean$subid)
hist(count(clean$totalerrors))
hist(count(as.data.frame(clean$totalerrors)))
hist(count(as.data.frame(numeric(clean$totalerrors))))
hist(clean.mean$perc_error)
xyplot
str(clean.data)
hist(clean.mean$perc_error, breaks = 30)
hist(clean.mean$perc_error, breaks = 50)
hist(clean.mean$perc_error, breaks = 100)
hist(clean.mean$perc_error, breaks = 100, density = TRUE)
hist(clean.mean$perc_error, breaks = 100, labels = clean.mean$subid)
hist(clean.mean$perc_error, breaks = 100, labels = TRUE)
data.frame(clean.mean)
hierror <- clean.mean %>%
filter(subid == c("002","003","005","008","014","015","021","023","024"))
notwanted <- c("002","003","005","008","014","015","021","023","024")
hierror <- clean.mean %>%
filter(!as.integer(subid) %in% nonWantedLevels))
hierror <- clean.mean %>%
filter(!as.integer(subid) %in% nonWantedLevels)
hierror <- clean.mean %>%
filter(!as.integer(subid) %in% nonwanted)
notwanted <- c("002","003","005","008","014","015","021","023","024")
hierror <- clean.mean %>%
filter(!as.integer(subid) %in% nonwanted)
hierror <- clean.mean %>%
filter(!as.integer(subid) %in% notwanted)
hierror
as.integer(clean.mean$subid)
notwanted <- c(2,3,5,8,14,15,21,23,24)
hierror <- clean.mean %>%
filter(!as.integer(subid) %in% notwanted)
hierror
subjectsremoved <- clean.mean %>%
filter(!as.integer(subid) %in% notwanted)
hist(clean.mean$perc_error, breaks = 100, labels = TRUE)
hist(subjectsremoved$perc_error, breaks = 100, labels = TRUE)
subjectsremoved$perc_error
data.frame(subjectsremoved)
notwanted <- c(2,3,5,8,14,15,21,23,24)
subjectsremoved <- clean.mean %>%
filter(!as.integer(subid) %in% notwanted)
data.frame(subjectsremoved)
notwanted <- c(2,3,5,8,14,15,21,23,24)
!as.integer(clean.mean$subid)
as.integer(clean.mean$subid)
data.frame(clean.mean)
levels(clean.mean$subid)
clean.mean$subid[19]
data.frame(subjectsremoved)
notwanted <- c(2,3,5,8,14,15,20,22,23)
subjectsremoved <- clean.mean %>%
filter(!as.integer(subid) %in% notwanted)
hist(subjectsremoved$perc_error, breaks = 100, labels = TRUE)
boxplot.with.outlier.label(clean.mean$perc_error~clean.mean$condition*clean.mean$subid)
boxplot.with.outlier.label(subjectsremoved$perc_error~clean.mean$condition*clean.mean$subid)
boxplot.with.outlier.label(subjectsremoved$perc_error~subjectsremoved$condition*subjectsremoved$subid)
clean.mean
clean
boxplot.with.outlier.label(clean$rt~clean$condition*clean$subid)
boxplot.with.outlier.label(clean$rt~clean$condition*clean$r1g0)
hist(subjectsremoved$perc_error, breaks = 100, labels = TRUE)
hist(clean$perc_error, breaks = 100, labels = TRUE)
hist(clean$totalerrors, breaks = 100, labels = TRUE)
length(subjectsremoved$subid)
levels(subjectsremoved$subid)
length(levels(subjectsremoved$subid))
levels(subjectsremoved$subid) <- droplevels(subjectsremoved$subid)
length(levels(subjectsremoved$subid))
subjectsremoved <- clean %>%
filter(!as.integer(subid) %in% notwanted)
levels(subjectsremoved$subid) <- droplevels(subjectsremoved$subid)
length(subjectsremoved)
length(subjectsremoved$subid)
hist(subjectsremoved$subid)
hist(subjectsremoved$rt)
hist(subjectsremoved$rt, xlim = c(0,2000))
hist(subjectsremoved$rt, xlim = c(0,2000), breaks = 100)
hist(subjectsremoved$rt, xlim = c(0,2000), breaks = 500)
hist(subjectsremoved$rt, xlim = c(150,2000), breaks = 500)
hist(subjectsremoved$rt, xlim = c(150,2000), ylim = (0,2000) breaks = 1000)
hist(subjectsremoved$rt, xlim = c(150,2000), ylim = c(0,200) breaks = 1000)
hist(subjectsremoved$rt, xlim = c(150,2000), ylim = c(0,200), breaks = 1000)
hist(subjectsremoved$rt, xlim = c(150,2000), ylim = c(0,50), breaks = 1000, density = TRUE)
hist(subjectsremoved$rt, xlim = c(150,2000), ylim = c(0,50), breaks = 1000)
hist(subjectsremoved$rt~subjectsremoved$condition, xlim = c(150,2000), ylim = c(0,50), breaks = 1000)
hist(formula = subjectsremoved$rt~subjectsremoved$condition, xlim = c(150,2000), ylim = c(0,50), breaks = 1000)
hist(subjectsremoved$rt, xlim = c(150,2000), ylim = c(0,50), breaks = 1000)
ggplot(data = subjectsremoved, formula = rt~condition, xlim = c(150,2000), ylim = c(0,50), breaks = 1000)
ggplot(data = subjectsremoved, formula = rt~condition, aes(xlim = c(150,2000), ylim = c(0,50), breaks = 1000)) +
geom_histogram()
ggplot(data = subjectsremoved, formula = rt~condition) +
geom_histogram()
ggplot(data = subjectsremoved, formula = rt~condition) +
geom_histogram(stat = "density")
ggplot(data = subjectsremoved, formula = rt~condition) +
geom_histogram(stat = "density", bins = 500,binwidth = .9)
ggplot(data = subjectsremoved, formula = rt~condition) +
geom_histogram(stat = "density", bins = 500,binwidth = .9,pad = 1)
qplot(subjectsremoved$rt, geom = "histogram")
ggplot(subjectsremoved, aes(subjectsremoved$rt)) + geom_histogram()
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) + geom_density(alpha=.3)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition), xlim(150,2000)) + geom_density(alpha=.3)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition, r1g0)) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition, r1g0))) +
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition, r1g0))) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition), colour = r1g0)) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition))) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition))) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition)))
+
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = c(condition))) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(palette = 1)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(palette = 2)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(palette = 10)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(palette = 100)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(palette = 11)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(palette = 12)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(palette = 13)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(type = "div",palette = 13)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 1)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.3) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 2)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 2)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 3)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 4)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 5)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 6)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 7)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 7)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 8)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 9)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 10)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(150,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(data=subjectsremoved, aes(xintercept=mean(rt),  colour=condition),
linetype="dashed", size=1)
ggplot(subjectsremoved, aes(subjectsremoved$rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(data=subjectsremoved, aes(xintercept=mean(rt),  colour=condition),
linetype="dashed", size=1)
clean
datart
clean.rt <- clean %>%
filter(rt >= 150 & rt <= 2000)
length(clean.rt$subid)
clean$pressCount
clean$isPractice
clean <- clean.data %>%
filter(isPractice == "no", pressCount == 1 | pressCount == 0) %>%
=======
aes(ymin=1-totalerrors-ci, ymax=1-totalerrors+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n")
accplot3
errorplot <- ggplot(real_errors, aes(x = as.factor(condition), y=freq, fill = totalerrors)) +
geom_bar(stat = "identity", position = "stack", aes(fill = totalerrors)) +
ylim(0,1) + theme_minimal() +  my.axis.font +
xlab("Condition")
errorplot
real_errors
real_errors <-clean %>%
group_by(condition, totalerrors = as.factor(totalerrors)) %>%
dplyr::summarise(total.count = n()) %>%
mutate(freq = total.count/sum(total.count)) %>%
filter(totalerrors == "1")
real_errors
real_errors <-clean %>%
group_by(condition, totalerrors = as.factor(totalerrors)) %>%
dplyr::summarise(total.count = n()) %>%
mutate(freq = total.count/sum(total.count)) %>%
filter(totalerrors == "0")
real_errors
datac1 <- summarySEwithin(clean, measurevar ="totalerrors", withinvars = c("condition"), idvar = "subid")
datac1
accplot2 <- ggplot(datac, aes(x = condition, y=1-totalerrors, fill = r1g0)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=1-totalerrors-ci, ymax=1-totalerrors+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n") +
scale_fill_brewer(type = "qual", palette = 2,direction = 1)
accplot2
accplot3 <- ggplot(datac1, aes(x = condition, y=1-totalerrors)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=1-totalerrors-ci, ymax=1-totalerrors+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n")
accplot3
clean
datac <- summarySEwithin(clean, measurevar ="totalerrors", withinvars = c("condition","r1g0"), idvar = "subid")
datac
clean <- clean.data %>%
filter(isPractice == "no") %>%
group_by(subid,condition,r1g0) %>%
dplyr::mutate(falsealarm = ifelse(pressCount == 1 & r1g0 == "r", 0,1)) %>%
dplyr::mutate(miss = ifelse(pressCount == 0 & r1g0 == "g", 0,1)) %>%
dplyr::mutate(totalerrors = miss + falsealarm)
datac <- summarySEwithin(clean, measurevar ="totalerrors", withinvars = c("condition","r1g0"), idvar = "subid")
datac
datac1 <- summarySEwithin(clean, measurevar ="totalerrors", withinvars = c("condition"), idvar = "subid")
datac1
clean
clean.data
clean <- clean.data %>%
filter(isPractice == "no") %>%
>>>>>>> origin/master
group_by(subid,condition,r1g0) %>%
dplyr::mutate(falsealarm = ifelse(pressCount == 1 & r1g0 == "r", 1,0)) %>%
dplyr::mutate(miss = ifelse(pressCount == 0 & r1g0 == "g", 1,0)) %>%
dplyr::mutate(totalerrors = miss + falsealarm)
<<<<<<< HEAD
clean$pressCount
class(clean.data$pressCount)
clean <- clean.data %>%
filter(isPractice == "no", pressCount == 1 | pressCount == 0) %>%
group_by(subid,condition,r1g0) %>%
dplyr::mutate(falsealarm = ifelse(pressCount == 1 & r1g0 == "r", 1,0)) %>%
dplyr::mutate(miss = ifelse(pressCount == 0 & r1g0 == "g", 1,0)) %>%
dplyr::mutate(totalerrors = miss + falsealarm)
clean$pressCount
class(clean$pressCount)
summary(clean$falsealarm)
summary(clean$totalerrors)
clean$totalerrors
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_error = mean(totalerrors)*100)
clean.mean
data.frame(clean.mean)
clean.rt <- clean %>%
filter(rt >= 150 & rt <= 2000)
clean.rt
summary(clean.rt)
clean.rt <- clean %>%
select(subid,condition,r1g0,rt,falsealarm) %>%
filter(rt >= 150 & rt <= 2000)
clean.rt
summary(clean.rt$r1g0)
summary(clean.rt$falsealarm)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(data=data.frame(clean.rt), aes(xintercept=mean(rt),  colour=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(data=data.frame(clean.rt), aes(xintercept=median(rt),  colour=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(data=data.frame(clean.rt), aes(xintercept=median(rt),  colour=condition, alpha = .2),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(data=data.frame(clean.rt),
aes(xintercept=median(rt), colour=condition), position = "dodge",
linetype="dashed", size=1)
geom_vline(data=data.frame(clean.rt),
aes(xintercept=median(rt), colour=condition), position_dodge(),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(data=data.frame(clean.rt),
aes(xintercept=median(rt), colour=condition, position = "dodge"),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(aes(xintercept=median(rt), colour=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(aes(xintercept=median(rt), fill=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + scale_fill_brewer(type = "div", palette = 9) +
geom_vline(aes(xintercept=median(rt), color=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) + geom_line(stat="vline", xintercept="mean")
clean.rt
clean.rt %>%
group_by(condition, r1g0) %>%
dplyr::summarise(rt.med = median(rt))
medlines <- clean.rt %>%
group_by(condition, r1g0) %>%
dplyr::summarise(rt.med = median(rt))
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = medlines, xintercept=rt, color=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = data.frame(medlines), xintercept=rt, color=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = data.frame(medlines), xintercept=rt.mean, color=condition),
linetype="dashed", size=1)
medlines
ggplot(data.frame(clean.rt), aes(rt, fill = condition, colour = r1g0)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = data.frame(medlines), xintercept=rt.med, color=condition),
linetype="dashed", size=1)
medlines
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = data.frame(medlines), xintercept=rt.med, color=condition),
linetype="dashed", size=1)
medlines(rt.med)
medlines <- clean.rt %>%
group_by(condition, r1g0) %>%
dplyr::summarise(rt.med = median(rt))
medlines$rt.med
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = data.frame(medlines), xintercept=rt.med, color=condition),
linetype="dashed", size=1)
medlines <- clean.rt %>%
group_by(condition) %>%
dplyr::summarise(rt.med = median(rt))
medlines
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = as.data.frame(medlines), xintercept=rt.med, color=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = as.data.frame(medlines), xintercept=data.frame(medlines$rt.med), color=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(aes(data = as.data.frame(medlines), xintercept=medlines$rt.med, color=condition),
linetype="dashed", size=1)
geom_vline(data = as.data.frame(medlines), aes(xintercept=medlines$rt.med, color=condition),
linetype="dashed", size=1)
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(data = as.data.frame(medlines), aes(xintercept=medlines$rt.med, color=condition),
linetype="dashed", size=1)
clean.rt
datart <- summarySEwithin(clean.rt, measurevar ="rt", withinvars = c("condition","totalerrors"), idvar = "subid")
clean.rt
datart <- summarySEwithin(clean.rt, measurevar ="rt", withinvars = c("condition","falsealarm"), idvar = "subid")
datart
rtplot1 <- ggplot(datart, aes(x = as.factor(condition),
fill = falsealarm,y=rt)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
xlab("Condition")
rtplot1
rtplot1 <- ggplot(datart, aes(x = as.factor(condition),
fill = falsealarm,y=rt.norm)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt.norm-ci, ymax=rt.norm+ci)) +
xlab("Condition")
rtplot1
datart
rtplot1 <- ggplot(datart, aes(x = as.factor(condition),
fill = falsealarm,y=rt_norm)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt_norm-ci, ymax=rt_norm+ci)) +
xlab("Condition")
rtplot1
rtplot1 <- ggplot(datart, aes(x = as.factor(falsealarm),
fill = condition,y=rt_norm)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt_norm-ci, ymax=rt_norm+ci)) +
xlab("Condition")
rtplot1
rtplot1 <- ggplot(datart, aes(x = as.factor(falsealarm),
fill = condition,y=rt_norm)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt_norm-ci, ymax=rt_norm+ci)) +
xlab("False Alarm") + scale_x_discrete(labels = c("incorrect","correct"))
rtplot1
rtplot1 <- ggplot(datart, aes(x = as.factor(falsealarm),
fill = condition,y=rt_norm)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt_norm-ci, ymax=rt_norm+ci)) +
xlab("False Alarm") #+ scale_x_discrete(labels = c("incorrect","correct"))
rtplot1
rtplot1 <- ggplot(datart, aes(x = as.factor(falsealarm),
fill = condition,y=rt_norm)) +
geom_bar(stat = "identity", position = "dodge") + theme_minimal() +
my.axis.font() + geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt_norm-ci, ymax=rt_norm+ci)) +
scale_x_discrete("False Alarm", labels = c("incorrect","correct"))
source("Load_Data.R")
combined.data <- CombineData()
clean.data <- CleanData(combined.data)
# Descriptives ------------------------------------------------------------
str(clean.data)
summaryBy(rt ~ subid + condition + r1g0, data = clean.data)
clean.data %>%
group_by(subid, condition, r1g0) %>%
dplyr::summarise(total.count = n())
# Calculate DV's -----------------------------------------------------
#Create accuracy
clean <- clean.data %>%
filter(isPractice == "no", pressCount == 1 | pressCount == 0) %>%
group_by(subid,condition,r1g0) %>%
dplyr::mutate(falsealarm = ifelse(pressCount == 1 & r1g0 == "r", 1,0)) %>%
dplyr::mutate(miss = ifelse(pressCount == 0 & r1g0 == "g", 1,0)) %>%
dplyr::mutate(totalerrors = miss + falsealarm)
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_error = mean(totalerrors)*100)
clean.rt <- clean %>%
select(subid,condition,r1g0,rt,falsealarm) %>%
filter(rt >= 150 & rt <= 2000)
# Outliers ----------------------------------------------------------------
source("https://raw.githubusercontent.com/talgalili/R-code-snippets/master/boxplot.with.outlier.label.r") # Load the function
boxplot.with.outlier.label(clean$rt~clean$condition*clean$r1g0)
notwanted <- c(2,3,5,8,14,15,20,22,23)
subjectsremoved <- clean %>%
filter(!as.integer(subid) %in% notwanted)
levels(subjectsremoved$subid) <- droplevels(subjectsremoved$subid)
#rthist
medlines <- clean.rt %>%
group_by(condition) %>%
dplyr::summarise(rt.med = median(rt))
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(data = as.data.frame(medlines), aes(xintercept=medlines$rt.med, color=condition),
linetype="dashed", size=1)
# Get some Error Bars -----------------------------------------------------
datac <- summarySEwithin(clean, measurevar ="totalerrors", withinvars = c("condition","r1g0"), idvar = "subid")
datac
datart <- summarySEwithin(clean.rt, measurevar ="rt", withinvars = c("condition","falsealarm"), idvar = "subid")
datart
boxplot.with.outlier.label(clean$rt~clean$condition*clean$r1g0)
clean.rt
boxplot.with.outlier.label(clean.rt$rt~clean$condition*clean$r1g0, label_name = c(letters[1:3]))
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0, label_name = c(letters[1:3]))
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0, label_name = c(letters[1:3,]))
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0, label_name = c(letters[1:6,]))
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0, label_name = c(letters[1,]))
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0, label_name = c(letters[6,]))
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0, label_name = c(letters))
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0)
levels(clean.rt$rt)
levels(clean.rt$condition)
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0,
label_name = "Test")
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0,
label_name = subid)
boxplot.with.outlier.label(clean.rt$rt~clean.rt$condition*clean.rt$r1g0,
label_name = clean.rt$subid)
clean.rt$subid
notwanted <- c(2,3,5,8,14,15,20,22,23)
subjectsremoved <- clean.rt %>%
filter(!as.integer(subid) %in% notwanted)
levels(subjectsremoved$subid) <- droplevels(subjectsremoved$subid)
medlines <- clean.rt %>%
group_by(condition) %>%
dplyr::summarise(rt.med = median(rt))
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(data = as.data.frame(medlines), aes(xintercept=medlines$rt.med, color=condition),
linetype="dashed", size=1)
medlines <- subjectsremoved %>%
group_by(condition) %>%
dplyr::summarise(rt.med = median(rt))
ggplot(data.frame(clean.rt), aes(rt, fill = condition)) +
geom_density(alpha=.8) + xlim(0,2000) +
geom_vline(data = as.data.frame(medlines), aes(xintercept=medlines$rt.med, color=condition),
linetype="dashed", size=1)
str(clean.data)
summaryBy(rt ~ subid + condition + r1g0, data = clean.data)
clean.data %>%
group_by(subid, condition, r1g0) %>%
dplyr::summarise(total.count = n())
clean
=======
clean
clean <- clean.data %>%
filter(isPractice == "no") %>%
group_by(subid,condition,r1g0) %>%
dplyr::mutate(falsealarm = ifelse(pressCount == 1 & r1g0 == "r", 1,0)) %>%
dplyr::mutate(miss = ifelse(pressCount == 0 & r1g0 == "g", 1,0)) %>%
dplyr::mutate(totalerrors = miss + falsealarm) %>%
dplyr::mutate(correct = ifelse(totalerrors == 0, 1,0))
clean
datac <- summarySEwithin(clean, measurevar ="correct", withinvars = c("condition","r1g0"), idvar = "subid")
datac
datac1 <- summarySEwithin(clean, measurevar ="correct", withinvars = c("condition"), idvar = "subid")
datac1
datart <- summarySEwithin(clean, measurevar ="rt", withinvars = c("condition","totalerrors"), idvar = "subid")
datart
datart <- summarySEwithin(clean, measurevar ="rt", withinvars = c("condition","correct"), idvar = "subid")
datart
accplot2 <- ggplot(datac, aes(x = condition, y=correct, fill = r1g0)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n") +
scale_fill_brewer(type = "qual", palette = 2,direction = 1)
accplot2
accplot3 <- ggplot(datac1, aes(x = condition, y=correct)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n")
accplot3
rt.mean <- clean %>%
group_by(condition, r1g0) %>%
filter(r1g0 == "g" | falsealarm == 1) %>%
dplyr::summarise(rt_mean = mean(rt))
clean %>%
group_by(condition, r1g0) %>%
filter(r1g0 == "g" | falsealarm == 1) %>%
dplyr::summarise(total.count = n())
rtplot1 <- ggplot(rt.mean, aes(x = as.factor(condition), y=rt_mean, fill = as.factor(r1g0))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(r1g0))) + ylim(0,1200) + theme_minimal() +  my.axis.font +
xlab("Condition") + scale_fill_brewer(type = "qual", palette = 2,direction = 1)
rtplot1
rtplot2 <- ggplot(datart, aes(x = as.factor(condition), y=rt, fill = as.factor(totalerrors))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(totalerrors))) +
ylim(0,510) + theme_minimal() +  my.axis.font +
xlab("Condition") + scale_fill_brewer(type = "qual", palette = 2,direction = 1) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
ggtitle("Reaction Time \n by Condition in a \n Go-NoGo DRT Task \n")
rtplot2
datart
rtplot2 <- ggplot(datart, aes(x = as.factor(condition), y=rt, fill = as.factor(correct))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(correct))) +
ylim(0,510) + theme_minimal() +  my.axis.font +
xlab("Condition") + scale_fill_brewer(type = "qual", palette = 2,direction = 1) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
ggtitle("Reaction Time \n by Condition in a \n Go-NoGo DRT Task \n")
rtplot2
rtplot3 <- ggplot(datart, aes(x = as.factor(correct), y=rt, fill = as.factor(condition))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(condition))) +
ylim(0,510) + theme_minimal() +  my.axis.font +
xlab("Condition") + scale_fill_brewer(type = "qual", palette = 2,direction = 1) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
ggtitle("Reaction Time \n by Condition in a \n Go-NoGo DRT Task \n")
rtplot3
rtplot3 <- ggplot(datart, aes(x = as.factor(correct), y=rt, fill = as.factor(condition))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(condition))) +
ylim(0,510) + theme_minimal() +  my.axis.font +
xlab("Correct") + scale_fill_brewer(type = "qual", palette = 2,direction = 1) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
ggtitle("Reaction Time \n by Condition in a \n Go-NoGo DRT Task \n")
rtplot3
rtplot2 <- ggplot(datart, aes(x = as.factor(condition), y=rt, fill = as.factor(correct))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(correct))) +
ylim(0,510) + theme_minimal() +  my.axis.font +
xlab("Condition") + scale_fill_brewer(type = "qual", palette = 2,direction = 1) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
ggtitle("Reaction Time \n by Condition in a \n Go-NoGo DRT Task \n")
rtplot2
rtplot3 <- ggplot(datart, aes(x = as.factor(correct), y=rt, fill = as.factor(condition))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(condition))) +
ylim(0,510) + theme_minimal() +  my.axis.font +
xlab("Correct") + scale_fill_brewer(type = "qual", palette = 2,direction = 1) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=rt-ci, ymax=rt+ci)) +
ggtitle("Reaction Time \n by Condition in a \n Go-NoGo DRT Task \n")
rtplot3
rtplot1 <- ggplot(rt.mean, aes(x = as.factor(condition), y=rt_mean, fill = as.factor(r1g0))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = as.factor(r1g0))) + ylim(0,1200) + theme_minimal() +  my.axis.font +
xlab("Condition") + scale_fill_brewer(type = "qual", palette = 2,direction = 1)
rtplot1
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_correct = mean(correct)*100)
clean.mean
summaryBy(perc_correct~condition,data=as.data.frame(clean.mean),FUN=function(x) {any(is.na(x))})
acc.lm <- with(as.data.frame(clean.mean), lmer(perc_correct ~ condition *r1g0  + (1|subid)),na.omit())
summary(acc.lm)
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_correct = mean(correct)*100)
summaryBy(perc_correct~condition,data=as.data.frame(clean.mean),FUN=function(x) {any(is.na(x))})
acc.lm <- with(as.data.frame(clean.mean), lmer(perc_correct ~ condition *r1g0  + (1|subid)),na.omit())
summary(acc.lm)
accplot2 <- ggplot(datac, aes(x = condition, y=correct, fill = r1g0)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n") +
scale_fill_brewer(type = "qual", palette = 2,direction = 1)
accplot2
acc.lm <- with(as.data.frame(clean.mean), lmer(perc_correct ~ condition  + (1|subid)),na.omit())
summary(acc.lm)
accplot3 <- ggplot(datac1, aes(x = condition, y=correct)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n")
accplot3
clean.mean
data.frame(clean.mean)
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_correct = mean(correct)*100) %>%
filter(perc_correct < 50)
summaryBy(perc_correct~condition,data=as.data.frame(clean.mean),FUN=function(x) {any(is.na(x))})
acc.lm <- with(as.data.frame(clean.mean), lmer(perc_correct ~ condition  + (1|subid)),na.omit())
summary(acc.lm)
clean.mean
clean.mean <- clean %>%
group_by(subid,condition, r1g0) %>%
dplyr::summarise(perc_correct = mean(correct)*100) %>%
filter(perc_correct > 50)
summaryBy(perc_correct~condition,data=as.data.frame(clean.mean),FUN=function(x) {any(is.na(x))})
acc.lm <- with(as.data.frame(clean.mean), lmer(perc_correct ~ condition  + (1|subid)),na.omit())
summary(acc.lm)
clean <- clean.data %>%
filter(isPractice == "no") %>%
group_by(subid,condition,r1g0) %>%
dplyr::mutate(falsealarm = ifelse(pressCount == 1 & r1g0 == "r", 1,0)) %>%
dplyr::mutate(miss = ifelse(pressCount == 0 & r1g0 == "g", 1,0)) %>%
dplyr::mutate(totalerrors = miss + falsealarm) %>%
dplyr::mutate(correct = ifelse(totalerrors == 0, 1,0))
datac <- summarySEwithin(clean, measurevar ="correct", withinvars = c("condition","r1g0"), idvar = "subid")
datac
datac1 <- summarySEwithin(clean, measurevar ="correct", withinvars = c("condition"), idvar = "subid")
datac1
datart <- summarySEwithin(clean, measurevar ="rt", withinvars = c("condition","correct"), idvar = "subid")
datart
clean
dprimepre <- clean %>%
filter(condition == "Pretesting")
dprimepre
levels(clean$condition)
dprimepre <- clean %>%
filter(condition == "PreTesting")
dprimepre
dprimepre <- clean %>%
filter(condition == "PreTesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::mutate(acc = correct))
dprimepre
dprimepre <- clean %>%
filter(condition == "PreTesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N"))
dprimepre
dprimepre <- clean %>%
filter(condition == "PreTesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N"))
dplyr::rename(acc = correct) %>%
select(subid,resp,acc)
dprimepre <- clean %>%
filter(condition == "PreTesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subid,resp,acc)
dprimepre
dprimepre <- clean %>%
filter(condition == "PreTesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subid,condition,r1g0,resp,acc)
dprimepre
dprimepre$condition
dprimepre$condition <- droplevels(dprimepre$condition)
levels(dprimepre$condition)
dprime = function(data) {
yes         = subset(data, resp=="Y")
no          = subset(data, resp=="N")
hit         = subset(data, resp=="Y" & acc == 1)
falsealarm  = subset(data, resp=="N" & acc == 0)
Hrate = xtabs(~subject, data=hit)/xtabs(~subject, data=yes)
Frate = xtabs(~subject, data=falsealarm)/xtabs(~subject, data=no)
dprime_score = qnorm(Hrate) - qnorm(Frate)
return(dprime_score)
}
dprime(dprimepre)
dprimepre <- clean %>%
filter(condition == "PreTesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimepre$condition <- droplevels(dprimepre$condition)
dprime(dprimepre)
dprime = function(data) {
yes         = subset(data, resp=="Y")
no          = subset(data, resp=="N")
hit         = subset(data, resp=="Y" & acc == 1)
falsealarm  = subset(data, resp=="Y" & acc == 0)
Hrate = xtabs(~subject, data=hit)/xtabs(~subject, data=yes)
Frate = xtabs(~subject, data=falsealarm)/xtabs(~subject, data=no)
dprime_score = qnorm(Hrate) - qnorm(Frate)
return(dprime_score)
}
dprime(dprimepre)
dprimepre
datac1 <- summarySEwithin(clean, measurevar ="correct", withinvars = c("condition"), idvar = "subid")
datac1
datac
clean
head(clean[1:20])
head(clean[1:20,])
head(clean[,1:20])
head(clean[1:20,1:4])
head(clean[1:20,1:8])
data.frame(head(clean[1:20,]))
head(data.frame(clean[1:20,]))
head(data.frame(clean[1:20,1:2]))
head(data.frame(clean[[1:20,]]))
head(data.frame(clean[[1:20]]))
head(data.frame(clean[1:20]))
head(data.frame(clean[1:20,]))
data.frame(clean[1:20,])
dprimepre
clean.mean
data.frame(clean.mean)
dprime(dprimepre)
names(clean)
names(clean$condition)
levels(clean$condition)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
dprime(dprimetest)
qpot(dprime(dprimetest))
qplot(dprime(dprimetest))
class(dprime(dprimetest))
data.frame(dprime(dprimetest))
qplot(data.frame(dprime(dprimepre)))
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
data.frame(dprime(dprimetest))
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq)
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq, na.omit())
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq, na.rm = TRUE)
qplot(data.frame(dprime(dprimepre)), x = subject, y = Freq, na.rm = TRUE)
ggplot(data.frame(dprime(dprimepre)), aes(x=subject, y = Freq)) + geom_line(na.rm = TRUE)
ggplot(data.frame(dprime(dprimepre)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE)
ggplot(data.frame(dprime(dprimepre)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprime(dprimepre)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
data.frame(dprime(dprimetest))
test <- ggplot(data.frame(dprime(dprimetest)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
test <- ggplot(data.frame(dprime(dprimetest)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
test
summary(dprimepre)
pre <- data.frame(dprime(dprimepre))
preplot <- ggplot(pre, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
pre <- data.frame(dprime(dprimepre))
preplot <- ggplot(pre, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
pre
summary(pre)
dplyr::summarise(pre, dprime = mean(Freq))
dplyr::summarise(pre, dprime = mean(Freq), rm.na = TRUE)
dplyr::summarise(pre, dprime = mean(Freq))
dplyr::summarise(pre, !is.na(dprime = mean(Freq)))
dplyr::summarise(pre, dprime = !is.na(mean(Freq)))
dplyr::summarise(pre)
pre <- data.frame(dprime(dprimepre))
dplyr::summarise(pre)
pre
mean(pre$Freq)
dprimetest <- clean %>%
filter(condition == "Testing") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimetest$condition <- droplevels(dprimetest$condition)
test <- ggplot(data.frame(dprime(dprimetest)), aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
test <- data.frame(dprime(dprimetest))
testplot <- ggplot(test, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
clean$condition
dprimepost <- clean %>%
filter(condition == "Posttesting") %>%
dplyr::mutate(resp = ifelse(pressCount == 1, "Y","N")) %>%
dplyr::rename(acc = correct) %>%
select(subject=subid,condition,r1g0,resp,acc)
dprimepost$condition <- droplevels(dprimepost$condition)
post <- data.frame(dprime(dprimepost))
postplot <- ggplot(post, aes(x=subject, y = Freq)) + geom_point(na.rm = TRUE) + ylim(-1,5)
postplot
dprimes <- rbind(pre, rbind(test,post))
dprimes
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
post <- data.frame(dprime(dprimepost)) %>%
mutate(condition = "post")
post
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
test <- data.frame(dprime(dprimetest)) %>%
mutate(condition = "test")
pre <- data.frame(dprime(dprimepre)) %>%
mutate(condition = "pre")
dprimes <- bind_rows(pre, bind_rows(test,post))
dprimes
levels(dprimes$condition)
dprimeplot <- ggplot(dprimes, aes(x=subject, y = Freq, color = as.factor(condition))) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_point(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimes$condition <- factor(dprimes$condition, levels = c("pre","test","post"))
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) + geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font()
dprimeplot + theme_minimal() + my.axis.font
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) +
geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font
dprimes
dprimes <- bind_rows(pre, bind_rows(test,post)) %>%
arrange(subject)
dprimes$condition <- factor(dprimes$condition, levels = c("pre","test","post"))
dprimes
dprimeplot <- ggplot(dprimes, aes(x=condition, y = Freq, color = as.factor(condition))) +
geom_boxplot(na.rm = TRUE) + ylim(-1,5)
dprimeplot + theme_minimal() + my.axis.font
accplot2 <- ggplot(datac, aes(x = condition, y=correct, fill = r1g0)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n") +
scale_fill_brewer(type = "qual", palette = 2,direction = 1)
accplot2
accplot3 <- ggplot(datac1, aes(x = condition, y=correct)) +
geom_bar(stat = "identity", position = "dodge", inherit.aes = TRUE, colour = "black") +
theme_minimal() +  my.axis.font + xlab("Condition") + coord_cartesian(ylim=c(.7,1)) +
geom_errorbar(position=position_dodge(.9), width = .25,
aes(ymin=correct-ci, ymax=correct+ci)) +
ggtitle("Percent \n Correct Responses in a \n Go-NoGo DRT Task \n")
accplot3
datac
clean.mean
dataframe(clean.mean)
data.frame(clean.mean)
clean %>%
group_by(condition, r1g0) %>%
filter(r1g0 == "g" | falsealarm == 1) %>%
dplyr::summarise(total.count = n())
acc.mean
datac
clean
clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
data.frame(aprime)
data.frame(aprime) %>%
filter(r1g0 = "g")
data.frame(aprime) %>%
filter(r1g0 == "g")
green <- aprime %>%
filter(r1g0 == "g") %>%
print(total.count)
green
green <- aprime %>%
filter(r1g0 == "g")
data.frame(green$total.count)
green$total.count
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
aprime
clean
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = pressCount, FA = falsealarm)
aprime
aprime <- clean %>%
select(subid,condition,r1g0,falsealarm,miss)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = as.numeric(pressCount), FA = falsealarm)
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = as.numeric(pressCount), FA = falsealarm)
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = pressCount, FA = falsealarm)
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0)
aprime
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n(), Hits = n(pressCount), FA = n(falsealarm))
aprime <- clean %>%
select(subid,condition,r1g0,pressCount,falsealarm)%>%
group_by(subid,condition,r1g0) %>%
dplyr::summarise(total.count = n())
aprime
>>>>>>> origin/master
